
-- Opcional, borrar tablas
/* BEGIN
FOR c IN (SELECT table_name
FROM all_tables where tablespace_name='AULAAPP') 
LOOP EXECUTE IMMEDIATE ('DROP TABLE "' ||
c.table_name || '" CASCADE constraints'); 
END LOOP;

FOR s IN (SELECT sequence_name
FROM user_sequences
) LOOP EXECUTE IMMEDIATE ('DROP SEQUENCE ' || s.sequence_name); 
END LOOP;

END;

/
*/

CREATE OR REPLACE PROCEDURE SP_INSERTAR_USUARIO(RUN_IN INT, DV_IN CHAR, PRI_NOM_IN VARCHAR, SEG_NOM_IN VARCHAR, PRI_AP_IN VARCHAR, SEG_AP_IN VARCHAR, ESTADO_IN CHAR,
                                                FEC_NAC_IN DATE, ID_ROL_IN INT, ID_SEXO_IN CHAR, ID_PUEBLO_IN INT, ID_CURSO_IN INT, ID_DISCAPACIDAD_IN INT, COMUNA_IN INT, DESCRIPCION_IN VARCHAR,
                                                COD_USUARIO_IN VARCHAR, MAIL_IN VARCHAR, PASSWORD_IN VARCHAR, RESULTADO_OUT OUT NUMBER)  
IS
/*V 1.0 CAMILO OSORIO
V2.0 ADOLFO MONTES - AGREGA VALIDADOR DE USUARIO Y LOGICA PARA INSERCION DE ALUMNOS*/
   RES_VAR NUMBER;
   RUN_VAR NUMBER;
   USER_VAR NUMBER;
BEGIN
    /*CUERPO DE LA FUNCION*/
    RUN_VAR:=0;
    RUN_VAR:= F_VALIDAR_RUN(RUN_IN);
    USER_VAR:=0;
    IF COD_USUARIO_IN IS NOT NULL THEN
        USER_VAR:= F_VALIDAR_USUARIO(COD_USUARIO_IN);
    END IF;
    IF RUN_VAR=0 AND USER_VAR=0 THEN
        INSERT INTO DIRECCION(ID_DIRECCION, DESCRIPCION, ID_COMUNA)VALUES((SELECT NVL((MAX (ID_DIRECCION)),0)+1 FROM DIRECCION), DESCRIPCION_IN, COMUNA_IN );
        COMMIT;
         INSERT INTO PERSONA (
                    RUN,
                    DV,
                    PRI_NOM,
                    SEG_NOM,
                    PRI_AP,
                    SEG_AP,
                    ESTADO,
                    FEC_NAC,
                    ID_ROL,
                    ID_SEXO,
                    ID_PUEBLO,
                    ID_DIRECCION,
                    ID_CURSO,
                    ID_DISCAPACIDAD) 
                VALUES (RUN_IN,
                    DV_IN, 
                    PRI_NOM_IN, 
                    SEG_NOM_IN, 
                    PRI_AP_IN, 
                    SEG_AP_IN, 
                    ESTADO_IN,
                    FEC_NAC_IN,
                    ID_ROL_IN,
                    ID_SEXO_IN,
                    REPLACE(ID_PUEBLO_IN, 0, null),
                    (SELECT MAX (ID_DIRECCION) FROM DIRECCION),
                    REPLACE(ID_CURSO_IN,0,null),
                    REPLACE(ID_DISCAPACIDAD_IN,0,null));
                    IF ID_ROL_IN <>5 THEN
                        SP_GUARDAR_CREDENCIALES(RUN_IN, COD_USUARIO_IN, MAIL_IN, PASSWORD_IN); --SI EL CURSO TIENE DATA, ENTONCES NO SE INSERTAN CREDENCIALES
                                                                                                --POR QUE SERIA UN ALUMNO Y ELLOS NO LOGUEAN
                    END IF;
                    COMMIT;
                RESULTADO_OUT:=0;
    ELSE
        IF USER_VAR = 1 THEN
            RESULTADO_OUT:=2; --Resultado 2: Usuario existe 
        ELSIF RUN_VAR = 1 THEN
            RESULTADO_OUT:=1; -- Resultado 1: Run existe
        ELSE 
            RESULTADO_OUT:=3; --Resultado 3: Error no definido
        END IF;
    END IF;     
END;
/
CREATE OR REPLACE FUNCTION F_VALIDARSIESALUMNO(RUN_IN NUMBER) RETURN NUMBER
IS 
    VALIDADOR_ALUMNO INT;
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
BEGIN
    SELECT RUN INTO VALIDADOR_ALUMNO FROM PERSONA WHERE RUN = RUN_IN AND ID_ROL = 5 AND ESTADO = 'A' AND ID_CURSO IS NOT NULL;
    RETURN VALIDADOR_ALUMNO;
EXCEPTION WHEN NO_DATA_FOUND THEN
    VALIDADOR_ALUMNO:= -1;
    RETURN VALIDADOR_ALUMNO;
WHEN OTHERS THEN 
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'F_VALIDARSIESALUMNO',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;    
    RETURN -1;
END;

/

CREATE OR REPLACE FUNCTION F_VALIDAREXISTENCIALECCION(FECHA_IN DATE, ID_ASIGNATURA_IN NUMBER) RETURN NUMBER
IS 
    VALIDADOR_LECCION NUMBER;
BEGIN
     SELECT ID_LECCION INTO VALIDADOR_LECCION FROM LECCIONARIO WHERE FECHA=FECHA_IN AND ID_ASIGNATURA = ID_ASIGNATURA_IN;
     IF VALIDADOR_LECCION > 0 THEN
        RETURN -1; -- LECCION YA EXISTE, DEBO UPDATEAR
     ELSE
        RETURN 0; --LECCION NO EXISTE, INSERTO
    END IF;
EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN 0;
WHEN OTHERS THEN
    RETURN -1;
END;

/

CREATE OR REPLACE FUNCTION F_VALIDAREXISTENCIAASIGNATURA(COD_ASIGNATURA_IN VARCHAR2) RETURN NUMBER
IS
    VALIDADOR NUMBER;
BEGIN   
    SELECT ID_ASIGNATURA INTO VALIDADOR FROM ASIGNATURA WHERE COD_ASIGNATURA = COD_ASIGNATURA_IN;
    IF VALIDADOR>0 THEN
        RETURN -1;
    ELSE 
        RETURN 0;
    END IF;

EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN 0;
WHEN OTHERS THEN 
    RETURN -1;
END;

/

CREATE OR REPLACE FUNCTION F_VALIDAREXISTENCIACODIGO(MAIL_IN VARCHAR2, RUN_IN NUMBER) RETURN NUMBER
IS 
    VALIDADOR_EXISTENCIA NUMBER;
BEGIN
    SELECT ID_GESTION INTO VALIDADOR_EXISTENCIA FROM GESTION_OTP WHERE LOWER(MAIL) = LOWER(MAIL_IN) AND UPPER(RUN) = RUN_IN AND ESTADO = 'A';
    IF VALIDADOR_EXISTENCIA>0 THEN
        RETURN VALIDADOR_EXISTENCIA;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
    RETURN 0;
END;

/

CREATE OR REPLACE FUNCTION F_VALIDAREXISTENCIAUSUARIO(MAIL_IN VARCHAR2, RUN_IN NUMBER) RETURN NUMBER
IS 
    VALIDADOR_EXISTENCIA NUMBER;
BEGIN
    SELECT RUN INTO VALIDADOR_EXISTENCIA FROM USUARIO WHERE LOWER(MAIL)=LOWER(MAIL_IN) AND UPPER(RUN) = UPPER(RUN_IN) AND ESTADO = 'A';
    IF VALIDADOR_EXISTENCIA>0 THEN
        RETURN VALIDADOR_EXISTENCIA;
    ELSE
        RETURN 0;
    END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
    RETURN 0;
END;

/

CREATE OR REPLACE FUNCTION F_CODIGOALEATORIO RETURN VARCHAR2
IS
BEGIN
    RETURN DBMS_RANDOM.STRING (1,10);
END;

/


CREATE OR REPLACE FUNCTION F_VALIDARCURSO(CODIGO_IN IN VARCHAR2, ID_NIVEL_IN IN INT, ANIO_IN IN NUMBER ) RETURN VARCHAR2
IS 
    VAR_OUT VARCHAR2(255);
BEGIN
    SELECT COD_CURSO INTO VAR_OUT FROM CURSO WHERE COD_CURSO = CODIGO_IN AND ID_NIVEL = ID_NIVEL_IN AND ANIO = ANIO_IN;
    RETURN VAR_OUT;
EXCEPTION
WHEN NO_DATA_FOUND THEN
    VAR_OUT:='0';
    RETURN VAR_OUT;
WHEN OTHERS THEN
    VAR_OUT:= '-1';
    RETURN VAR_OUT;--ERROR NO ESPECIFICADO
END;

/

CREATE OR REPLACE FUNCTION F_VALIDAR_APODERADO(RUN_IN NUMBER) RETURN NUMBER
IS
/*ZONA DECLARATIVA DE VARIABLES*/
RUN_VAR VARCHAR2(50);
RES_VAR NUMBER;
BEGIN
    /*CUERPO DE LA FUNCION*/
    SELECT RUN INTO RUN_VAR FROM APODERADO WHERE RUN=RUN_IN ;
    IF RUN_VAR IS NULL THEN
        RES_VAR:= 0;
    ELSE 
        RES_VAR:=1;
    END IF;
    RETURN RES_VAR;
EXCEPTION
WHEN NO_DATA_FOUND THEN
    RES_VAR:=0;
    RETURN RES_VAR;
WHEN OTHERS THEN
    RES_VAR:= 1;
    RETURN RES_VAR; 
    
END;

/


CREATE OR REPLACE FUNCTION F_VALIDAR_USUARIO(USUARIO_IN VARCHAR2) RETURN NUMBER
IS
/*ZONA DECLARATIVA DE VARIABLES*/
USUARIO_VAR VARCHAR2(50);
RES_VAR NUMBER;
BEGIN
    /*CUERPO DE LA FUNCION*/
    SELECT COD_USUARIO INTO USUARIO_VAR FROM USUARIO WHERE LOWER(COD_USUARIO) = LOWER(USUARIO_IN) ;
    IF USUARIO_VAR IS NULL THEN
        RES_VAR:= 0;
    ELSE 
        RES_VAR:=1;
    END IF;
    RETURN RES_VAR;
EXCEPTION
WHEN NO_DATA_FOUND THEN
    RES_VAR:=0;
    RETURN RES_VAR;
WHEN OTHERS THEN
    RES_VAR:= 1;
    RETURN RES_VAR; 
    
END;

/

CREATE OR REPLACE FUNCTION F_VALIDAR_RUN(RUN_IN NUMBER) RETURN NUMBER
IS
/*ZONA DECLARATIVA DE VARIABLES*/
RUN_VAR NUMBER;
RES_VAR NUMBER;
BEGIN
    /*CUERPO DE LA FUNCION*/
    SELECT RUN INTO RUN_VAR FROM PERSONA  WHERE RUN = RUN_IN;
    IF RUN_VAR IS NULL THEN
        RES_VAR:= 0;
    ELSE 
        RES_VAR:=1;
    END IF;
    RETURN RES_VAR;
    
EXCEPTION
WHEN NO_DATA_FOUND THEN
    RES_VAR:=0;
    RETURN RES_VAR;
WHEN OTHERS THEN


    RES_VAR:= 1;
    RETURN RES_VAR; 
    
END;
/

CREATE OR REPLACE FUNCTION F_VALIDAR_RUN_USUARIO(RUN_IN NUMBER) RETURN NUMBER
IS
/*ZONA DECLARATIVA DE VARIABLES*/
RUN_VAR NUMBER;
RES_VAR NUMBER;
BEGIN
    /*CUERPO DE LA FUNCION*/
    SELECT RUN INTO RUN_VAR FROM USUARIO WHERE RUN = RUN_IN;
    IF RUN_VAR IS NULL THEN
        RES_VAR:= 0;
    ELSE 
        RES_VAR:=1;
    END IF;
    RETURN RES_VAR;
    
EXCEPTION
WHEN NO_DATA_FOUND THEN
    RES_VAR:=0;
    RETURN RES_VAR;
WHEN OTHERS THEN
    RES_VAR:= 1;
    RETURN RES_VAR; 
    
END;

/


/************************Procedimientos************************************/

CREATE OR REPLACE PROCEDURE SP_GUARDAR_CREDENCIALES(RUN_IN NUMBER, COD_USUARIO_IN VARCHAR, MAIL_IN VARCHAR, PASSWORD_IN VARCHAR)

IS
/*ZONA DECLARATIVA DE VARIABLES*/

BEGIN
    /*CUERPO DE LA FUNCION*/
    INSERT INTO USUARIO(RUN, COD_USUARIO, MAIL, PASSWORD, ESTADO ) VALUES (RUN_IN, LOWER(COD_USUARIO_IN), MAIL_IN, PASSWORD_IN, 'A');

END;

/
CREATE OR REPLACE PROCEDURE SP_INSERTARRUTALUMNOAPODERADO(RUNALUMNO_IN IN NUMBER, RUN_APODERADO_IN IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS 
BEGIN
    INSERT INTO PERSONA_APODERADO(RUN, RUN_APODERADO) VALUES (RUNALUMNO_IN, RUN_APODERADO_IN);
    COMMIT;
    RESULTADO_OUT:=0;

EXCEPTION
WHEN OTHERS THEN
    RESULTADO_OUT:=1;
END;
/
CREATE OR REPLACE PROCEDURE SP_INSERTARDIRECCION(DESCRIPCION_IN IN VARCHAR2,
                                                ID_COMUNA_IN IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS 
BEGIN
    INSERT INTO DIRECCION(ID_DIRECCION, DESCRIPCION, ID_COMUNA) VALUES 
                        ( (SELECT NVL(MAX(ID_DIRECCION),0) +1 FROM DIRECCION), DESCRIPCION_IN, ID_COMUNA_IN)
                        RETURNING (SELECT NVL(MAX(ID_DIRECCION),0) +1 FROM DIRECCION) INTO RESULTADO_OUT;
    COMMIT;
EXCEPTION 
WHEN OTHERS THEN
    RESULTADO_OUT:=0;
    ROLLBACK;
END;

/

CREATE OR REPLACE PROCEDURE SP_INSERTARAPODERADO(RUN_IN IN NUMBER, DV_IN IN CHAR, PRI_NOM_IN IN VARCHAR2, SEG_NOM_IN IN VARCHAR2, PRI_AP_IN IN VARCHAR2,
                                                SEG_AP_IN IN VARCHAR2, OCUPACION_IN IN NUMBER, ESTADO_CIVIL_IN IN NUMBER, PARENTESCO_IN IN NUMBER,
                                                MAIL_IN IN VARCHAR2, TELEFONO_IN IN VARCHAR2, FEC_NAC_IN IN DATE, NIVEL_IN IN NUMBER, DIRECCION_IN IN VARCHAR2,
                                                COMUNA_IN IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS
    EXISTE_APODERADO NUMBER;
    DIRECCION_RESPUESTA NUMBER;
    err_num NUMBER;
    err_msg VARCHAR2(255);
BEGIN
    EXISTE_APODERADO:=F_VALIDAR_APODERADO(RUN_IN);
    IF EXISTE_APODERADO = 0 THEN   --APODERADO NO EXISTE, SE GUARDA
        SP_INSERTARDIRECCION(DIRECCION_IN, COMUNA_IN, DIRECCION_RESPUESTA); --GUARDAMOS DIRECCION --ok
        INSERT INTO APODERADO (RUN, DV, PRI_NOM, SEG_NOM, PRI_AP, SEG_AP, FEC_NAC, TELEFONO, MAIL, ESTADO, ID_NIVEL, ID_ESTADOCIVIL, ID_DIRECCION,
                            ID_OCUPACION, ID_PARENTESCO, ID_COMUNA)
                    VALUES(RUN_IN, DV_IN, PRI_NOM_IN, SEG_NOM_IN,PRI_AP_IN, SEG_AP_IN, FEC_NAC_IN, TELEFONO_IN, MAIL_IN, 'A', NIVEL_IN, ESTADO_CIVIL_IN, DIRECCION_RESPUESTA,
                            OCUPACION_IN, PARENTESCO_IN, COMUNA_IN);
        
         RESULTADO_OUT:=0;
    ELSE
        RESULTADO_OUT:= EXISTE_APODERADO;--APODERADO EXISTE
    END IF;
   COMMIT;
EXCEPTION 
WHEN OTHERS THEN
     err_num := SQLCODE;
    err_msg := SQLERRM;
    DBMS_OUTPUT.put_line('Error:'||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
    RESULTADO_OUT:=2; --ERROR NO ESPECIFICADO
    ROLLBACK;
END;

/

CREATE OR REPLACE PROCEDURE SP_INSERTARDISCAPACIDAD(NOM_DISCAPACIDAD_IN IN VARCHAR2, ID_DISCAPACIDAD_OUT OUT NUMBER)
IS
    
BEGIN
    INSERT INTO DISCAPACIDAD (ID_DISCAPACIDAD, NOM_DISCAPACIDAD)VALUES((SELECT NVL(MAX(ID_DISCAPACIDAD),0)+1 FROM DISCAPACIDAD), NOM_DISCAPACIDAD_IN)
    RETURNING (SELECT NVL(MAX(ID_DISCAPACIDAD),0)+1 FROM DISCAPACIDAD) INTO ID_DISCAPACIDAD_OUT;
    COMMIT;
EXCEPTION 
WHEN OTHERS THEN
    ID_DISCAPACIDAD_OUT:=-1;
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE SP_INSERTARALUMNO(RUN_IN NUMBER, DV_IN CHAR, PRI_NOM_IN VARCHAR, SEG_NOM_IN VARCHAR, PRI_AP_IN VARCHAR, SEG_AP_IN VARCHAR, ESTADO_IN CHAR,
                                                FEC_NAC_IN DATE,  ID_SEXO_IN CHAR, ID_PUEBLO_IN INT, ID_CURSO_IN INT, COMUNA_IN INT, DESCRIPCION_IN VARCHAR,
                                                DISCAPACIDAD_IN IN VARCHAR2, ANIO_IN IN NUMBER, USR_CREACION_IN IN VARCHAR2, RESULTADO_OUT OUT NUMBER)
IS 
    VALIDADOR_RUN NUMBER;
    RESULTADO_INS_DISCAP NUMBER;
    --RESULTADO_INS_MATRICULA NUMBER;
    VAR_ROL NUMBER;
BEGIN
    VALIDADOR_RUN:=F_VALIDAR_RUN(RUN_IN);
    IF VALIDADOR_RUN = 0 THEN --RUN NO ESTA REGISTRADO, LO REGISTRAMOS
        IF DISCAPACIDAD_IN IS NOT NULL THEN
            SP_INSERTARDISCAPACIDAD(DISCAPACIDAD_IN,RESULTADO_INS_DISCAP);
        END IF;
        --SP_INSERTARMATRICULA(RUN_IN, ANIO_IN,USR_CREACION_IN, ID_CURSO_IN, RESULTADO_INS_MATRICULA);
        SP_INSERTAR_USUARIO(RUN_IN, DV_IN, PRI_NOM_IN, SEG_NOM_IN,PRI_AP_IN, SEG_AP_IN, ESTADO_IN, FEC_NAC_IN, 
                            5 , ID_SEXO_IN, ID_PUEBLO_IN, 0 , RESULTADO_INS_DISCAP, COMUNA_IN, DESCRIPCION_IN,
                            NULL, NULL, NULL,RESULTADO_OUT); 
        DBMS_OUTPUT.PUT_LINE(RESULTADO_OUT);
        COMMIT; 
    ELSE    
        RESULTADO_OUT:=-1;--RUT REGISTRADO
    END IF;

END;

/

CREATE OR REPLACE PROCEDURE SP_INSERTARMATRICULA(RUN_IN IN NUMBER, ANIO_IN IN NUMBER, USR_CREACION_IN IN VARCHAR2, NIVEL_IN IN INT, RESULTADO_OUT OUT NUMBER)  
IS
/*v1.0 Adolfo Montes*/
   RES_VAR NUMBER;
   UPDATE_MATRICULA NUMBER;
BEGIN
    INSERT INTO MATRICULA (NUM_MATRICULA, ANIO, FEC_MATRICULA, ESTADO, USR_CREACION, NIVEL) 
                    VALUES((SELECT NVL(MAX(NUM_MATRICULA), 0)+1 FROM MATRICULA), ANIO_IN, CURRENT_TIMESTAMP, 'A', USR_CREACION_IN, NIVEL_IN)
                    RETURNING (SELECT NVL(MAX(NUM_MATRICULA), 0)+1 FROM MATRICULA) INTO RESULTADO_OUT;
                    --UPDATE_MATRICULA:=F_INSERTAR_MATRICULA(RUN_IN, RESULTADO_OUT);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE(UPDATE_MATRICULA);
EXCEPTION
WHEN OTHERS THEN
    RESULTADO_OUT:=-1;
    ROLLBACK;
END;

/

CREATE OR REPLACE PROCEDURE SP_INSERTARCURSO(ID_NIVEL_IN IN INT, CODIGO_IN IN VARCHAR2, NOMBRECURSO_IN IN VARCHAR2, 
                                            CANTIDADMAX_IN IN NUMBER, ANIO_IN IN NUMBER, ID_DOCENTE_IN IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS 
VALIDADOR_CURSO VARCHAR2(1500);
v_codigo_error    NUMBER;
v_mensaje_error   VARCHAR2(1500);
BEGIN
    VALIDADOR_CURSO:=F_VALIDARCURSO(CODIGO_IN, ID_NIVEL_IN, ANIO_IN);

    IF VALIDADOR_CURSO = 0 THEN
            INSERT INTO CURSO(ID_CURSO, COD_CURSO, NOM_CURSO, CANTIDAD_MAX, ID_NIVEL, ANIO, ID_DOCENTE, ESTADO) 
                    VALUES ((SELECT NVL(MAX(ID_CURSO), 0) +1 FROM CURSO), CODIGO_IN, NOMBRECURSO_IN, CANTIDADMAX_IN, ID_NIVEL_IN, ANIO_IN, 
                    REPLACE(ID_DOCENTE_IN, 0, null), 'A');
                    
        COMMIT;
        RESULTADO_OUT:=0;
    ELSE
        RESULTADO_OUT:=1;
    END IF;

EXCEPTION 
WHEN OTHERS THEN
    ROLLBACK;
    v_codigo_error := SQLCODE;
    v_mensaje_error :=  SQLERRM;
    RESULTADO_OUT:=v_mensaje_error;
END;
/
CREATE OR REPLACE PROCEDURE SP_ACTUALIZARUSUARIO(RUN_IN INT, PRI_NOM_IN VARCHAR, SEG_NOM_IN VARCHAR, PRI_AP_IN VARCHAR, SEG_AP_IN VARCHAR,
                                                FEC_NAC_IN DATE, ID_ROL_IN INT, ID_SEXO_IN CHAR, ID_PUEBLO_IN INT, COMUNA_IN INT, DESCRIPCION_IN VARCHAR,
                                                MAIL_IN VARCHAR, RESULTADO_OUT OUT NUMBER)  
IS

--V1.0 Adolfo Montes
BEGIN
    /*CUERPO DE LA FUNCION*/
    UPDATE USUARIO SET MAIL = MAIL_IN WHERE RUN = RUN_IN;
    UPDATE DIRECCION SET ID_COMUNA=COMUNA_IN, DESCRIPCION = DESCRIPCION_IN WHERE ID_DIRECCION = (SELECT ID_DIRECCION FROM PERSONA WHERE RUN= RUN_IN);
    UPDATE PERSONA SET PRI_NOM= PRI_NOM_IN, SEG_NOM=SEG_NOM_IN, PRI_AP = PRI_AP_IN, SEG_AP = SEG_AP_IN,
                    FEC_NAC = FEC_NAC_IN, ID_ROL=REPLACE(ID_ROL_IN, 0, null), ID_SEXO = ID_SEXO_IN, ID_PUEBLO = REPLACE(ID_PUEBLO_IN,0, null) 
                    WHERE RUN = RUN_IN;
    COMMIT;
    RESULTADO_OUT:=0;
    
EXCEPTION 
WHEN OTHERS THEN
    RESULTADO_OUT:=-1;
    ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE SP_ELIMINARALUMNODECURSO(RUN_IN IN INT, RESULTADO_OUT OUT NUMBER)
AS
BEGIN
    UPDATE PERSONA SET ID_CURSO=NULL WHERE RUN = RUN_IN AND ESTADO = 'A';
    COMMIT;
    RESULTADO_OUT:=0;
EXCEPTION
WHEN OTHERS THEN
    ROLLBACK;
    RESULTADO_OUT:=-1;
END;
/



CREATE OR REPLACE PROCEDURE SP_AGREGARSALA(COD_SALA_IN IN VARCHAR, PISO_IN IN VARCHAR, RESULTADO_OUT OUT NUMBER)
IS
    VALIDADOR_SALA VARCHAR2(20);
BEGIN
    SELECT COD_SALA INTO VALIDADOR_SALA FROM SALA WHERE COD_SALA = COD_SALA_IN AND ESTADO = 'A';
    IF VALIDADOR_SALA IS NULL THEN 
        INSERT INTO SALA(ID_SALA, COD_SALA, PISO, ESTADO) VALUES((SELECT NVL(MAX(ID_SALA), 0) + 1 FROM SALA), COD_SALA_IN, PISO_IN, 'A');
        COMMIT;
        RESULTADO_OUT:= 0;
    ELSE
        RESULTADO_OUT:= -2; --REGISTRO EXISTE
    END IF;
EXCEPTION 
WHEN NO_DATA_FOUND THEN
        INSERT INTO SALA(ID_SALA, COD_SALA, PISO, ESTADO) VALUES((SELECT NVL(MAX(ID_SALA), 0) + 1 FROM SALA), COD_SALA_IN, PISO_IN, 'A');
        COMMIT;
    RESULTADO_OUT:= 0;
WHEN OTHERS THEN
    ROLLBACK;
    RESULTADO_OUT:=-1;--ERROR NO CONTROLADO
END;

/
CREATE OR REPLACE PROCEDURE SP_DESACTIVARSALA(ID_SALA_IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS
BEGIN
    UPDATE SALA SET ESTADO = 'X' WHERE ID_SALA = ID_SALA_IN AND ESTADO = 'A';
    COMMIT;
    RESULTADO_OUT:= 0;
EXCEPTION 
WHEN OTHERS THEN
    ROLLBACK;
    RESULTADO_OUT:= -1;
END;
/

CREATE OR REPLACE PROCEDURE SP_VALIDARCODIGOTP(MAIL_IN VARCHAR2, RUN_IN NUMBER, CODIGO_OTP_IN VARCHAR2, RESULTADO_OUT OUT NUMBER)
IS 
    VALIDADOR_EXISTENCIA NUMBER;
BEGIN
    SELECT ID_GESTION INTO VALIDADOR_EXISTENCIA FROM GESTION_OTP WHERE LOWER(MAIL) = LOWER(MAIL_IN) AND RUN = RUN_IN AND ESTADO = 'A' AND USADO = 0 AND CODIGO_OTP = CODIGO_OTP_IN;
    IF VALIDADOR_EXISTENCIA>0 THEN
        RESULTADO_OUT:= 0;
    ELSE
        RESULTADO_OUT:= -1;
    END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
    RESULTADO_OUT:= -1;

END;
/
CREATE OR REPLACE PROCEDURE SP_CREARCODIGOOTP (MAIL_IN IN VARCHAR2, RUN_IN IN NUMBER, SALIDA_OUT OUT VARCHAR)
IS
    CODIGO_ALEATORIO VARCHAR(150);
    VALIDADOR_EXISTENCIA NUMBER;
    VALIDADOR_USUARIO_EXISTE NUMBER;
BEGIN
    VALIDADOR_USUARIO_EXISTE:=F_VALIDAREXISTENCIAUSUARIO(MAIL_IN, RUN_IN);
    VALIDADOR_EXISTENCIA:=F_VALIDAREXISTENCIACODIGO(MAIL_IN, RUN_IN);
    CODIGO_ALEATORIO:=F_CODIGOALEATORIO();
    IF VALIDADOR_EXISTENCIA >0 THEN
        UPDATE GESTION_OTP SET ESTADO='X' WHERE ID_GESTION = VALIDADOR_EXISTENCIA;
        COMMIT;
    END IF;
    IF VALIDADOR_USUARIO_EXISTE > 0 THEN
        INSERT INTO GESTION_OTP (ID_GESTION, MAIL, RUN, HORA_ENVIO, CODIGO_OTP, USADO, ESTADO)
            VALUES((SELECT NVL(MAX(ID_GESTION), 0)+1 FROM GESTION_OTP), MAIL_IN, RUN_IN, CURRENT_TIMESTAMP, CODIGO_ALEATORIO,0, 'A' );
        COMMIT;
        SALIDA_OUT:=CODIGO_ALEATORIO; --CREO CODIGO OTP
    ELSE
        SALIDA_OUT:='-1';
    END IF;
    
END;
/
CREATE OR REPLACE PROCEDURE SP_AGREGARBLOQUEASIGNATURA(ID_ASIGNATURA_IN IN NUMBER, ID_BLOQUEHORARIO_IN IN NUMBER)
IS
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
BEGIN
    INSERT INTO BLOQUE_ASIGNATURA (ID_HORARIO, ID_ASIGNATURA, ID_BLOQUEHORARIO) 
                VALUES( (SELECT NVL(MAX(ID_HORARIO), 0) +1 FROM BLOQUE_ASIGNATURA), ID_ASIGNATURA_IN, ID_BLOQUEHORARIO_IN );
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;

    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_AGREGARBLOQUEASIGNATURA',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;
END;
/
CREATE OR REPLACE PROCEDURE SP_ELIMINARBLOQUEASIGNATURA(ID_ASIGNATURA_IN IN NUMBER)
IS
BEGIN
    DELETE FROM BLOQUE_ASIGNATURA WHERE ID_ASIGNATURA = ID_ASIGNATURA_IN;
END;
/
CREATE OR REPLACE PROCEDURE SP_ELIMINARASIGNATURA(ID_ASIGNATURA_IN IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS
BEGIN   
    UPDATE ASIGNATURA SET ESTADO = 'X' WHERE ID_ASIGNATURA = ID_ASIGNATURA_IN;
    DELETE FROM BLOQUE_ASIGNATURA WHERE ID_ASIGNATURA =ID_ASIGNATURA_IN;
    RESULTADO_OUT:= 0;
EXCEPTION WHEN OTHERS THEN
    RESULTADO_OUT:= -1;
END;
/
CREATE OR REPLACE PROCEDURE SP_AGREGARALUMNOACURSO(RUN_IN IN NUMBER, ID_CURSO_IN IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS
    
    CURSOR ASIGNATURA_CUR IS
    SELECT ID_ASIGNATURA FROM ASIGNATURA WHERE ID_CURSO = ID_CURSO_IN; 
    FILA_VAR ASIGNATURA_CUR%ROWTYPE;
BEGIN
    UPDATE PERSONA SET ID_CURSO = ID_CURSO_IN WHERE RUN = RUN_IN;
    FOR FILA_VAR IN ASIGNATURA_CUR
    LOOP
        INSERT INTO PERSONA_ASIGNATURA(RUN, ID_ASIGNATURA) VALUES(RUN_IN, FILA_VAR.ID_ASIGNATURA);
    END LOOP;
    COMMIT;
    RESULTADO_OUT:= 0;
    
EXCEPTION
WHEN OTHERS THEN
    ROLLBACK;
    RESULTADO_OUT:= 1;
END;
/

CREATE OR REPLACE PROCEDURE SP_INSERTARLECCION(DESCRIPCION_IN IN VARCHAR, DATE_IN IN DATE, USUARIO_IN VARCHAR, ID_ASIGNATURA_IN IN INT, RESULTADO_OUT OUT NUMBER)
IS
    VALIDADOR_LECCION INT;
    MSJ_ERROR VARCHAR(1000);
    ANIO_ASIGNATURA INT;
    VALIDADOR_ANIO INT;
BEGIN
    VALIDADOR_LECCION:= F_VALIDAREXISTENCIALECCION(DATE_IN, ID_ASIGNATURA_IN);
    SELECT ANIO INTO ANIO_ASIGNATURA FROM ASIGNATURA WHERE ID_ASIGNATURA = ID_ASIGNATURA_IN;
    IF ANIO_ASIGNATURA = EXTRACT(YEAR FROM DATE_IN) THEN
        VALIDADOR_ANIO:=0;
    ELSE
        VALIDADOR_ANIO:=-1; --El año seleccionado para la lección no coincide con el año de asignatura
    END IF;
    IF VALIDADOR_LECCION = -1 and VALIDADOR_ANIO =0 THEN
        UPDATE LECCIONARIO SET DESCRIPCION=DESCRIPCION_IN, FECHA_MOD= CURRENT_TIMESTAMP, USUARIO_MOD=USUARIO_IN WHERE FECHA = DATE_IN AND ID_ASIGNATURA = ID_ASIGNATURA_IN;
        RESULTADO_OUT :=1; --registro updateado
    ELSIF VALIDADOR_LECCION = 0 and VALIDADOR_ANIO =0 THEN
        INSERT INTO LECCIONARIO (ID_LECCION, DESCRIPCION, FECHA, FECHA_CREACION, USUARIO_CRE, ID_ASIGNATURA)
                    VALUES((SELECT NVL(MAX(ID_LECCION), 0)+1 FROM LECCIONARIO), DESCRIPCION_IN, DATE_IN, CURRENT_TIMESTAMP, USUARIO_IN, ID_ASIGNATURA_IN);
         RESULTADO_OUT :=0; --registro insertado
    ELSIF VALIDADOR_ANIO = -1 THEN
        RESULTADO_OUT:=-2;
    END IF;
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    MSJ_ERROR:=SQLERRM ;
    DBMS_OUTPUT.PUT_LINE(MSJ_ERROR);
    RESULTADO_OUT :=-1; --Error
END;
/

CREATE OR REPLACE PROCEDURE SP_INSERTARASIGNATURA(NOM_IN IN VARCHAR2, COD_IN IN VARCHAR2, ANIO_IN IN NUMBER,
                        DOC_IN IN NUMBER, SALA_IN IN NUMBER, CURSO_IN IN NUMBER, CALCULO_IN NUMBER, USR_CREACION_IN VARCHAR2, RESULTADO_OUT OUT NUMBER)
IS 
    VALIDADOR_ASIGNATURA NUMBER;
    ERROR VARCHAR(1000);
    MAX_ID NUMBER;
    CURSOR ALUMNOS_CURSO IS
        SELECT RUN, DV, PRI_NOM, SEG_NOM, PRI_AP, SEG_AP, ID_CURSO

        FROM PERSONA WHERE ID_ROL =5 AND ID_CURSO = CURSO_IN; 
        FILA_VAR ALUMNOS_CURSO%ROWTYPE;
BEGIN
    VALIDADOR_ASIGNATURA := F_VALIDAREXISTENCIAASIGNATURA(COD_IN); -- SI EL CODIGO DE ASIGNATURA NO EXISTE, ENTONCES REGISTRO
    SELECT NVL(MAX(ID_ASIGNATURA),0 )+1 INTO MAX_ID FROM ASIGNATURA;
    IF VALIDADOR_ASIGNATURA = 0 THEN
        INSERT INTO ASIGNATURA(ID_ASIGNATURA, NOM_ASIGNATURA, COD_ASIGNATURA, ANIO, ESTADO, USR_CREACION, FECHA_CREACION, CALCULO, ID_CURSO, ID_SALA,
                            DOC_ASIGNADO) VALUES 
                            (MAX_ID, NOM_IN, COD_IN, ANIO_IN, 'A', USR_CREACION_IN,
                            CURRENT_TIMESTAMP, CALCULO_IN, CURSO_IN, SALA_IN, DOC_IN );
    FOR FILA_VAR IN ALUMNOS_CURSO
    LOOP
        INSERT INTO PERSONA_ASIGNATURA (RUN, ID_ASIGNATURA) VALUES (FILA_VAR.RUN, MAX_ID);
    END LOOP;
    RESULTADO_OUT := 0;
    ELSIF VALIDADOR_ASIGNATURA = -2 THEN
        UPDATE ASIGNATURA SET DOC_ASIGNADO = DOC_IN, CALCULO = CALCULO_IN WHERE COD_ASIGNATURA=COD_IN; --SI EXISTE, UPDATEO
        RESULTADO_OUT:= -2;

    END IF;
    COMMIT;
    
EXCEPTION WHEN OTHERS THEN
    ERROR:=SQLERRM;
    RESULTADO_OUT :=-1;
    DBMS_OUTPUT.PUT_LINE(ERROR);
    ROLLBACK;
END;

/

CREATE OR REPLACE PROCEDURE SP_INSERTARASISTENCIA(FECHA_ASISTENCIA_IN IN DATE, ESTADO_IN IN CHAR, USR_CREACION_IN IN VARCHAR,
                            RUN_IN IN NUMBER, ID_CURSO_IN IN NUMBER, DIAS_BLOQUEO IN NUMBER, RESULTADO_OUT OUT VARCHAR)
/*
    CODE 0 SUCESS.
    ERRORS:
    -1 = RUT DOESN'T EXIST
    -2 = ATTENTANCE HAS + DAYS THAN DEFINED AS DIAS_BLOQUEO PARAMETER
    -3 = ATTENDANCE CAN'T BE INSERTED IN THE FUTURE
    -4 = PERSON ISN'T A VALID STUDENT(A STATUS, AND ROLE 5)
*/
IS 
    VALIDADOR_FECHA INT;
    VALIDADOR_ALUMNO INT;
    VALIDADOR_EXISTEASISTENCIA INT;
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
BEGIN 
    SELECT TO_DATE(SYSDATE, 'DD-MM-YYYY') - TO_DATE(FECHA_ASISTENCIA_IN, 'DD-MM-YYYY') INTO VALIDADOR_FECHA FROM DUAL;
    SELECT COUNT(ID_ASISTENCIA) INTO VALIDADOR_EXISTEASISTENCIA FROM ASISTENCIA WHERE FECHA_ASISTENCIA = FECHA_ASISTENCIA_IN AND RUN = RUN_IN AND ID_CURSO = ID_CURSO_IN;
    VALIDADOR_ALUMNO:=F_VALIDARSIESALUMNO(RUN_IN);
    IF VALIDADOR_ALUMNO = -1 THEN
        RESULTADO_OUT:='-4'; 

    ELSE
        IF VALIDADOR_FECHA > DIAS_BLOQUEO THEN
        RESULTADO_OUT:= '-2'; --ASISTENCIA TIENE MAS DE X DIAS DEFINIDOS EN DIAS_BLOQUEO, NO ES POSIBLE INSERTAR
        ELSIF VALIDADOR_FECHA < 0 THEN
            RESULTADO_OUT:= '-3'; -- ASISTENCIA NO PUEDE SER INSERTADA EN EL FUTURO
        ELSIF VALIDADOR_EXISTEASISTENCIA > 0 THEN
        UPDATE ASISTENCIA SET FECHA_CREACION=CURRENT_TIMESTAMP, ESTADO= ESTADO_IN, USR_CREACION = USR_CREACION_IN WHERE
                            FECHA_ASISTENCIA = FECHA_ASISTENCIA_IN AND RUN = RUN_IN AND ID_CURSO = ID_CURSO_IN;
            RESULTADO_OUT:='1'; --YA EXISTE ASISTENCIA, REGISTRO MODIFICADO
            COMMIT;
        ELSE
            INSERT INTO ASISTENCIA(ID_ASISTENCIA, FECHA_CREACION, FECHA_ASISTENCIA, ESTADO, USR_CREACION, RUN, ID_CURSO)
                    VALUES (SEC_INGRESOASISTENCIA.NEXTVAL, CURRENT_TIMESTAMP, FECHA_ASISTENCIA_IN, ESTADO_IN,
                            USR_CREACION_IN, RUN_IN, ID_CURSO_IN);
            RESULTADO_OUT:='0';
            COMMIT;
        END IF;
    END IF;
EXCEPTION WHEN OTHERS THEN
    ROLLBACK;
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    -- INSERTANDO ERROR EN REGISTRO
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_INSERTARASISTENCIA',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;
    IF SQL_ERRORCODE='-2291' THEN
        RESULTADO_OUT:='-1'; 
    ELSE
        RESULTADO_OUT:=SQL_ERRORMESSAGE;
    END IF;
    DBMS_OUTPUT.PUT_LINE('ERR ->' || RESULTADO_OUT);  
END;

/

CREATE OR REPLACE FUNCTION F_VALIDARNOTASEMESTRE(RUN_IN NUMBER, ANIO_IN NUMBER, ID_ASIGNATURA_IN NUMBER) RETURN NUMBER
IS
    VALIDADOR_NOTA NUMBER;
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
BEGIN
    SELECT ID_NOTA INTO VALIDADOR_NOTA FROM NOTA WHERE ID_ASIGNATURA = ID_ASIGNATURA_IN AND RUN= RUN_IN AND ANIO=ANIO_IN;
    IF (VALIDADOR_NOTA IS NULL) THEN
        VALIDADOR_NOTA := 0; -- NO HAY NOTAS, DEBO INSERTAR
    END IF;
    RETURN VALIDADOR_NOTA; -- SI VALIDADOR_NOTA >1 ENTONCES DEBO UPDATEAR USANDO ESE ID_NOTA
EXCEPTION WHEN NO_DATA_FOUND THEN
    VALIDADOR_NOTA:=0; -- NO HAY NOTAS, POR ENDE DEBO INSERTAR
    RETURN VALIDADOR_NOTA;
WHEN OTHERS THEN
    VALIDADOR_NOTA:=-1;
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;

    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'F_VALIDARNOTASEMESTRE',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;
    RETURN VALIDADOR_NOTA;
END;

/

CREATE OR REPLACE PROCEDURE SP_INSERTARNOTASEMESTRE(RUN_IN IN NUMBER, ID_ASIGNATURA_IN NUMBER, ANIO_IN IN NUMBER
            , N1_IN IN NUMBER, N2_IN IN NUMBER, N3_IN IN NUMBER, N4_IN IN NUMBER, N5_IN IN NUMBER, N6_IN IN NUMBER,
            N7_IN IN NUMBER, N8_IN IN NUMBER, N9_IN IN NUMBER, N10_IN IN NUMBER, SEMESTRE_IN IN NUMBER,  RESULTADO_OUT OUT VARCHAR)
IS 
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
    VALIDADOR_ASIGNATURA NUMBER;
    RESULTADO_OUT_1 NUMBER;
BEGIN 
    VALIDADOR_ASIGNATURA:=F_VALIDARNOTASEMESTRE(RUN_IN, ANIO_IN, ID_ASIGNATURA_IN);
    IF VALIDADOR_ASIGNATURA = 0 AND SEMESTRE_IN = 1 THEN
        INSERT INTO NOTA(ID_NOTA, RUN, ID_ASIGNATURA, ANIO, N1, N2, N3, N4, N5, N6, N7, N8, N9, N10, ESTADO) VALUES
        ((SELECT NVL(MAX(ID_NOTA), 0) +1 FROM NOTA), RUN_IN, ID_ASIGNATURA_IN, ANIO_IN, N1_IN, N2_IN, N3_IN, N4_IN, N5_IN, N6_IN, N7_IN,
                        N8_IN, N9_IN, N10_IN, 'Z');
        SP_CALCULARNOTA1SEMESTRE(RUN_IN, ID_ASIGNATURA_IN,RESULTADO_OUT_1 );
        RESULTADO_OUT:= 0;
    ELSIF VALIDADOR_ASIGNATURA = 0 AND SEMESTRE_IN = 2 THEN
        INSERT INTO NOTA(ID_NOTA, RUN, ID_ASIGNATURA, ANIO, N11, N12, N13, N14, N15, N16, N17, N18, N19, N20, ESTADO) VALUES
        ((SELECT NVL(MAX(ID_NOTA), 0) +1 FROM NOTA), RUN_IN, ID_ASIGNATURA_IN, ANIO_IN, N1_IN, N2_IN, N3_IN, N4_IN, N5_IN, N6_IN, N7_IN,
                        N8_IN, N9_IN, N10_IN, 'Z');
        SP_CALCULARNOTA2SEMESTRE(RUN_IN, ID_ASIGNATURA_IN, RESULTADO_OUT_1 );
        RESULTADO_OUT:= 0;
    ELSIF VALIDADOR_ASIGNATURA > 0 AND SEMESTRE_IN = 1 THEN
        UPDATE NOTA SET N1 = N1_IN, N2 = N2_IN, N3 = N3_IN, N4 = N4_IN, N5 = N5_IN, N6 = N6_IN, N7 = N7_IN, N8 = N8_IN, N9 = N9_IN,
                        N10 = N10_IN WHERE ID_NOTA = VALIDADOR_ASIGNATURA;
        SP_CALCULARNOTA1SEMESTRE(RUN_IN, ID_ASIGNATURA_IN, RESULTADO_OUT_1 );
        RESULTADO_OUT:= 1;
    ELSIF VALIDADOR_ASIGNATURA > 0 AND SEMESTRE_IN = 2 THEN
        UPDATE NOTA SET N11 = N1_IN, N12 = N2_IN, N13 = N3_IN, N14 = N4_IN, N15 = N5_IN, N16 = N6_IN, N17 = N7_IN, N18 = N8_IN, N19 = N9_IN,
                        N20 = N10_IN WHERE ID_NOTA = VALIDADOR_ASIGNATURA;
        SP_CALCULARNOTA2SEMESTRE(RUN_IN, ID_ASIGNATURA_IN, RESULTADO_OUT_1);
        RESULTADO_OUT:= 1;
    ELSE
        RESULTADO_OUT:=-1;
    END IF;
    COMMIT;
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_INSERTARNOTASEMESTRE',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;
    RESULTADO_OUT := -1;
END;



/




CREATE OR REPLACE FUNCTION F_CONTARNOTASS1(RUN_IN NUMBER, ID_ASIGNATURA_IN NUMBER) RETURN INT
IS
    NOTA_VAR INT;
BEGIN
    select count(nota) INTO NOTA_VAR 
    from (select run, anio, id_asignatura, n, nota from NOTA
    unpivot ( 
      NOTA for n in ( N1, N2, N3, N4,N5,N6,N7,N8,N9,N10)
    ))b where NVL(nota, 0) <>0 and  id_asignatura = ID_ASIGNATURA_IN and run = RUN_IN;
    RETURN NOTA_VAR;
EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN 0;
END;
/

CREATE OR REPLACE FUNCTION F_CONTARNOTASS2(RUN_IN NUMBER, ID_ASIGNATURA_IN NUMBER) RETURN INT
IS
    NOTA_VAR INT;
BEGIN
    select count(nota) INTO NOTA_VAR 
    from (select run, anio, id_asignatura, n, nota from NOTA
    unpivot ( 
      NOTA for n in (N11, N12, N13, N14, N15, N16, N17, N18, N19, N20)
    ))b where NVL(nota, 0) <>0 and  id_asignatura = ID_ASIGNATURA_IN and run = RUN_IN;
    RETURN NOTA_VAR;
EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN 0;
END;

/

CREATE OR REPLACE FUNCTION F_SUMARNOTASS1(RUN_IN NUMBER, ID_ASIGNATURA_IN NUMBER) RETURN INT
IS
    CANTIDAD_VAR INT;
BEGIN
    Select sum(nota) into CANTIDAD_VAR
    from(select run, anio, id_asignatura, n, nota from NOTA
    unpivot ( 
      NOTA for n in ( N1, N2, N3, N4, N5, N6, N7, N8, N9, N10)
    )) x where id_asignatura = ID_ASIGNATURA_IN and run = RUN_IN;
    RETURN CANTIDAD_VAR;
EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN 1;
END;
/
CREATE OR REPLACE FUNCTION F_SUMARNOTASS2(RUN_IN NUMBER, ID_ASIGNATURA_IN NUMBER) RETURN INT
IS
    CANTIDAD_VAR INT;
BEGIN
    Select sum(nota) into CANTIDAD_VAR
    from(select run, anio, id_asignatura, n, nota from NOTA
    unpivot ( 
      NOTA for n in (N11, N12, N13, N14, N15, N16, N17, N18, N19, N20 )
    )) x where id_asignatura = ID_ASIGNATURA_IN and run = RUN_IN;
    RETURN CANTIDAD_VAR;
EXCEPTION WHEN NO_DATA_FOUND THEN
    RETURN 1;
END;
/



CREATE OR REPLACE PROCEDURE SP_GUARDAROBSERVACION(TIPO_IN IN VARCHAR, DESCRIPCION_IN IN VARCHAR, USUARIO_IN IN VARCHAR, RUN_IN IN NUMBER, ID_CURSO_IN IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS 

    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
BEGIN 
   INSERT INTO OBSERVACION (ID_OBS, TIPO, DESC_OBS, FECHA_INS, USR_CREACION, RUN, ID_CURSO) 
                        VALUES((SELECT NVL(MAX(ID_OBS), 0 )+1 FROM OBSERVACION), TIPO_IN, DESCRIPCION_IN, CURRENT_TIMESTAMP, USUARIO_IN, RUN_IN, ID_CURSO_IN);
                        COMMIT;
    RESULTADO_OUT:= 0;
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    RESULTADO_OUT:=-1;
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_GUARDAROBSERVACION',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;

END;

/

CREATE OR REPLACE PROCEDURE SP_CALCULARNOTA1SEMESTRE(RUN_IN IN NUMBER, ID_ASIGNATURA_IN IN NUMBER, RESULTADO_OUT OUT VARCHAR)
IS 
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
    SUMA_NOTAS NUMBER;
    COUNT_NOTAS NUMBER;
BEGIN 
    SUMA_NOTAS:=F_SUMARNOTASS1(RUN_IN, ID_ASIGNATURA_IN);
    COUNT_NOTAS:=F_CONTARNOTASS1(RUN_IN, ID_ASIGNATURA_IN);
    UPDATE NOTA SET P1 = ROUND(SUMA_NOTAS/COUNT_NOTAS, 1) WHERE ID_ASIGNATURA = ID_ASIGNATURA_IN AND RUN = RUN_IN;
    RESULTADO_OUT :=0;
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    RESULTADO_OUT :=-1;
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_CALCULARNOTA1SEMESTRE',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;

END;

/


CREATE OR REPLACE PROCEDURE SP_CALCULARNOTA2SEMESTRE(RUN_IN IN NUMBER, ID_ASIGNATURA_IN IN NUMBER, RESULTADO_OUT OUT VARCHAR)
IS 
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
    SUMA_NOTAS NUMBER;
    COUNT_NOTAS NUMBER;
BEGIN 
    SUMA_NOTAS:=F_SUMARNOTASS2(RUN_IN, ID_ASIGNATURA_IN);
    COUNT_NOTAS:=F_CONTARNOTASS2(RUN_IN, ID_ASIGNATURA_IN);
    UPDATE NOTA SET P2 = ROUND(SUMA_NOTAS/COUNT_NOTAS, 1) WHERE ID_ASIGNATURA = ID_ASIGNATURA_IN AND RUN = RUN_IN;
    RESULTADO_OUT :=0;
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    RESULTADO_OUT :=-1;
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_CALCULARNOTA1SEMESTRE',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;

END;

/

CREATE OR REPLACE PROCEDURE SP_CERRARASIGNATURA(ID_ASIGNATURA_IN IN NUMBER, RESULTADO_OUT OUT VARCHAR)

IS 

    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
    PARAM_VAR NUMBER;
    CURSOR ALUMNOS_CURSO IS
        select 
            p.run, p.pri_nom, nvl(p.seg_nom,' ') as seg_nom, p.pri_ap, nvl(p.seg_ap, ' ') as seg_ap, round((a.p1 + a.p2)/2, 1) as nota
        from nota a  join persona p on a.run = p.run
        where a.id_asignatura = ID_ASIGNATURA_IN; 
    FILA_VAR ALUMNOS_CURSO%ROWTYPE;
BEGIN 
    UPDATE NOTA SET PF = ROUND((p1 + p2)/2, 1) WHERE ID_ASIGNATURA = ID_ASIGNATURA_IN;
    COMMIT;
    SELECT VALOR INTO PARAM_VAR FROM PARAMS WHERE ID_PARAM = 1;
    FOR FILA_VAR IN ALUMNOS_CURSO
    LOOP
        IF FILA_VAR.NOTA >=PARAM_VAR THEN
            UPDATE NOTA SET ESTADO = 'A' WHERE RUN = FILA_VAR.RUN AND ID_ASIGNATURA = ID_ASIGNATURA_IN; --SI LA NOTA ES MAYOR A LO DEFINIDO, APRUEBA
        ELSIF FILA_VAR.NOTA < PARAM_VAR THEN
            UPDATE NOTA SET ESTADO = 'R' WHERE RUN = FILA_VAR.RUN AND ID_ASIGNATURA = ID_ASIGNATURA_IN; -- SI ES MENOR, REPRUEBA
        END IF;
    END LOOP;
    UPDATE ASIGNATURA SET ESTADO = 'F' WHERE ID_ASIGNATURA = ID_ASIGNATURA_IN; --CAMBIA ESTADO A FINALIZADO
    COMMIT;
    RESULTADO_OUT := 0;
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    RESULTADO_OUT:=-1;
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_CERRARASIGNATURA',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;

END;




/

CREATE OR REPLACE PROCEDURE SP_RECUPERARPROMEDIOS(ID_CURSO_IN IN NUMBER, RUN_IN IN NUMBER, P1_CURSO_OUT OUT NUMBER, P2_CURSO_OUT OUT NUMBER,
        PF_CURSO_OUT OUT NUMBER, P1_ALUMNO_OUT OUT NUMBER, P2_ALUMNO_OUT OUT NUMBER, PF_ALUMNO_OUT OUT NUMBER)
IS
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
BEGIN
    select NVL(ROUND(sum(p1)/count(p1), 1), 0) INTO P1_CURSO_OUT
        from v_notas2 where id_curso = ID_CURSO_IN and p1<> 0;
    select NVL(ROUND(sum(p2)/count(p2), 1),0) INTO P2_CURSO_OUT
        from v_notas2 where id_curso = ID_CURSO_IN and p2<> 0;
    select NVL(ROUND(sum(pf)/count(pf),1), 0) INTO PF_CURSO_OUT
        from v_notas2 where id_curso = ID_CURSO_IN and p2<> 0;
    
    select NVL(ROUND(sum(p1)/count(p1), 1), 0) INTO P1_ALUMNO_OUT
        from v_notas2 where id_curso = ID_CURSO_IN and p1<> 0 and run=RUN_IN;
    select NVL(ROUND(sum(p2)/count(p2), 1),0) INTO P2_ALUMNO_OUT
        from v_notas2 where id_curso = ID_CURSO_IN and p2<> 0 and run=RUN_IN;
    select NVL(ROUND(sum(pf)/count(pf),1), 0) INTO PF_ALUMNO_OUT
        from v_notas2 where id_curso = ID_CURSO_IN and p2<> 0 and run=RUN_IN;
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;

    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_RECUPERARPROMEDIOS',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;
END;
/


CREATE OR REPLACE FUNCTION F_GETPARAMETRO(PARAMETRO_IN IN NUMBER) RETURN NUMBER
IS
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
    RETORNO NUMBER;
BEGIN
    SELECT VALOR INTO RETORNO FROM PARAMS WHERE ID_PARAM = PARAMETRO_IN;
    RETURN RETORNO;
EXCEPTION WHEN NO_DATA_FOUND THEN
    RETORNO:= -2;
    RETURN RETORNO;
WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    RETORNO:= -1;
    
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'F_GETPARAMETRO',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    RETURN RETORNO;
    COMMIT;
END;

/

CREATE OR REPLACE PROCEDURE SP_SETPARAMETROS(PARAMETRO_IN IN NUMBER, VALOR_IN IN NUMBER, RESULTADO_OUT OUT NUMBER)
IS
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
    GET_PARAM NUMBER;
BEGIN
    GET_PARAM:= F_GETPARAMETRO(PARAMETRO_IN);
    IF GET_PARAM = -2 THEN
        INSERT INTO PARAMS (ID_PARAM, DESCRIPCION, VALOR) VALUES (1, 'Nota minima de aprobacion', VALOR_IN);
        COMMIT;
        RESULTADO_OUT:=0; --VALOR NO EXISTE, LO CREO
    ELSIF GET_PARAM >=0 THEN
        UPDATE PARAMS SET VALOR = VALOR_IN WHERE ID_PARAM =1;
        RESULTADO_OUT:=1; --VALOR EXISTE, UPDATEO
    END IF;
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    RESULTADO_OUT:=-1;
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_SETPARAMETROS',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE SP_AGREGARANUNCIO(TITULO_IN IN VARCHAR, DETALLE_IN IN VARCHAR, TIPO_IN IN NUMBER, USR_CREACION_IN IN VARCHAR, RESULTADO_OUT OUT NUMBER)
IS
    SQL_ERRORCODE INT;
    SQL_ERRORMESSAGE VARCHAR(1500);
BEGIN
    INSERT INTO EVENTO(ID_EVENTO, TITULO, DETALLE, TIPO, FECHA_INS, ESTADO, USR_CREACION) VALUES
        ((SELECT NVL(MAX(ID_EVENTO),0)+1 FROM EVENTO), TITULO_IN, DETALLE_IN, TIPO_IN, CURRENT_TIMESTAMP, 'A', USR_CREACION_IN);
    RESULTADO_OUT :=0;
EXCEPTION WHEN OTHERS THEN
    SQL_ERRORMESSAGE:=SQLERRM;
    SQL_ERRORCODE:= SQLCODE;
    RESULTADO_OUT :=-1;
    INSERT INTO ERROR(ID_ERROR, PROCESO, COD_ERROR, MENSAJE_ERROR, FECHA) VALUES
                    ((SELECT NVL(MAX(ID_ERROR), 0)+1 FROM ERROR), 'SP_AGREGARANUNCIO',SQL_ERRORCODE,SQL_ERRORMESSAGE, CURRENT_TIMESTAMP );
    COMMIT;
END;

/